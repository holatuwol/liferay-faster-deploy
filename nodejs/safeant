#!/bin/bash

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/../dirnames.py
}

fixclasspath() {
	if [ "" == "${CATALINA_HOME}" ] || [ ! -d ${CATALINA_HOME} ]; then
		return 0
	fi

	pushd ${GIT_ROOT} > /dev/null

	echo "Checking portal dependency libraries..."

	for folder in development global portal; do
		if [ ! -f lib/$folder/dependencies.properties ]; then
			continue
		fi

		for dependency in $(cat lib/$folder/dependencies.properties); do
			local lib_jar=lib/$folder/$(echo $dependency | cut -d'=' -f 1).jar

			local group_gradle=$(echo $dependency | cut -d'=' -f 2 | cut -d':' -f 1)
			local group_maven=$(echo $group_gradle | tr '.' '/')
			local name=$(echo $dependency | cut -d'=' -f 2 | cut -d':' -f 2)
			local version=$(echo $dependency | cut -d'=' -f 2 | cut -d':' -f 3)

			local gradle_path=

			for cache in liferay-binaries-cache-2020 liferay-binaries-cache-2017; do
				gradle_path=../${cache}/.gradle/caches/modules-2/files-2.1/${group_gradle}/${name}/${version}

				if [ -d ${gradle_path} ]; then
					local gradle_jar=$(find $gradle_path -name ${name}-${version}.jar | head -1)

					if [ "" != "$gradle_jar" ]; then
						cp $gradle_jar $lib_jar
						break
					fi
				fi
			done
		done
	done

	echo "Unzipping compiled root level folders from bundle..."

	for folder in $(ls -1); do
		if [ -f $folder/build.xml ]; then
			unzipportaljar $folder
		fi
	done

	if [ -d modules ]; then
		echo "Copying portal-pre modules from bundle..."

		local missing_jar=

		if [ -f git-commit-portal ]; then
			for folder in $(git ls-tree -r --name-only $(cat git-commit-portal) | grep -F .lfrbuild-portal-pre | dirnames); do
				unziposgijar $folder
				local jar_name=$(grep -F 'Bundle-SymbolicName' $folder/bnd.bnd | cut -d' ' -f 2).jar

				if [ ! -f tmp/lib-pre/${jar_name} ]; then
					echo "Missing ${jar_name}"
					missing_jar=true
				fi
			done
		else
			for folder in $(git ls-files modules | grep -F .lfrbuild-portal-pre | dirnames); do
				unziposgijar $folder
				local jar_name=$(grep -F 'Bundle-SymbolicName' $folder/bnd.bnd | cut -d' ' -f 2).jar

				if [ ! -f tmp/lib-pre/${jar_name} ]; then
					echo "Missing ${jar_name}"
					missing_jar=true
				fi
			done
		fi

		if [ "" != "${missing_jar}" ]; then
			echo "Missing a jar from the bundle, running ant compile instead"
			ant compile
		fi
	fi

	popd > /dev/null
}

fixdefaults() {
	if [ "" != "$(grep -F useNpmCI modules/build.gradle)" ]; then
		return 0
	fi

	local GRADLE_PLUGINS_DEFAULTS=$(grep com.liferay.gradle.plugins.defaults modules/build-buildscript.gradle | grep -o 'version: "[^"]*"' | cut -d'"' -f 2)

	if [ "5.3" != "$(echo ${GRADLE_PLUGINS_DEFAULTS} | cut -d'.' -f 1,2)" ]; then
		return 0
	fi

	if [[ 29 -lt $(echo ${GRADLE_PLUGINS_DEFAULTS} | cut -d'.' -f 3) ]]; then
		return 0
	fi

	local PUBLIC_PACKAGE_JSON=$(git ls-files modules | grep -F package.json | grep -vF '/src/' | grep -c '^')
	local PUBLIC_PACKAGE_LOCK_JSON=$(git ls-files modules | grep -F package-lock.json | grep -vF '/src/' | grep -c '^')

	local PRIVATE_PACKAGE_JSON=0
	local PRIVATE_PACKAGE_LOCK_JSON=0

	if [ -f git-commit-portal ]; then
		PRIVATE_PACKAGE_JSON=${PUBLIC_PACKAGE_JSON}
		PRIVATE_PACKAGE_LOCK_JSON=${PUBLIC_PACKAGE_LOCK_JSON}

		PUBLIC_PACKAGE_JSON=$(git ls-tree -r --name-only $(cat git-commit-portal) -- modules | grep -F package.json | grep -vF '/src/' | grep -c '^')
		PUBLIC_PACKAGE_LOCK_JSON=$(git ls-tree -r $(cat git-commit-portal) -- modules | grep -F package-lock.json | grep -vF '/src/' | grep -c '^')
	fi

	if [[ $(expr ${PUBLIC_PACKAGE_JSON} '+' ${PRIVATE_PACKAGE_JSON}) -ne $(expr ${PUBLIC_PACKAGE_LOCK_JSON} '+' ${PRIVATE_PACKAGE_LOCK_JSON}) ]]; then
		sed -i.bak '/com.liferay.gradle.plugins.defaults/s/version: "[^"]*"/version: "5.3.29"/' modules/build-buildscript.gradle
	fi
}

safeant() {
	GIT_ROOT=

	setopts

	if [ "" == "$GIT_ROOT" ]; then
		echo "Unable to detect git root"
		return 1
	fi

	. $(dirname ${BASH_SOURCE[0]})/../appserverprops

	for cache in liferay-binaries-cache-2017 liferay-binaries-cache-2020; do
		if [ -d "$GIT_ROOT/../${cache}/.git" ]; then
			pushd "$GIT_ROOT/../${cache}" > /dev/null
			git clean -xdf
			git reset --hard
			popd > /dev/null
		elif [ -d "$GIT_ROOT/../${cache}" ]; then
			echo 'Re-cloning ${cache} because it is not a valid git repository'
			pushd "$GIT_ROOT/.." > /dev/null
			rm -rf ${cache}
			git clone git@github.com:liferay/${cache}.git
			popd > /dev/null
		fi
	done

	pushd $GIT_ROOT > /dev/null

	fixdefaults

	# Record the start time

	echo "Started $(date)" | tee $GIT_ROOT/.redeploy/compile.txt

	if [ "${GIT_ROOT}" != "${PWD}" ]; then
		fixclasspath
	fi

	# Building older tags might not work due to version range
	# dependencies and the corresponding bnd.bnd

	if [ -f modules/build.gradle ]; then
		$(dirname ${BASH_SOURCE[0]})/../fixbnd
	fi

	# Improve build consistency by removing items that
	# are not needed from the build and not using the CDN

	if [ "true" == "${CACHE_NPM}" ]; then
		$(dirname ${BASH_SOURCE[0]})/../skipmp
		$(dirname ${BASH_SOURCE[0]})/cachenpm

		git update-index --assume-unchanged build-common.xml
		sed -i.bak 's@<arg value="--no-daemon" />$@<arg value="--no-daemon" /><arg value="-Drepository.url=https://repository.liferay.com/nexus/content/groups/public" />@' build-common.xml

		if [ "" != "$(git ls-files | grep '.\(gradle\|properties\)$' | xargs grep -Fl cdn.lfrs.sl)" ]; then
			GRADLE_ARGS="$GRADLE_ARGS --no-daemon -Drepository.url=https://repository.liferay.com/nexus/content/groups/public"

			git ls-files | grep '.\(gradle\|properties\)$' | xargs grep -Fl cdn.lfrs.sl | xargs git update-index --assume-unchanged
			git ls-files | grep '.\(gradle\|properties\)$' | xargs grep -Fl cdn.lfrs.sl | xargs sed -i.bak 's@http://cdn.lfrs.sl/repository.liferay.com/@https://repository-cdn.liferay.com/@g'
			git ls-files | grep '.\(gradle\|properties\)$' | xargs grep -Fl cdn.lfrs.sl | xargs sed -i.bak 's@https://cdn.lfrs.sl/repository.liferay.com/@https://repository-cdn.liferay.com/@g'
		fi
	fi

	popd > /dev/null

	local IS_SNAPSHOT=true

	if [ "${GIT_ROOT}" != "${PWD}" ]; then
		IS_SNAPSHOT=

		for ARG in $@; do
			if [ "install-portal-snapshot" == "${ARG}" ]; then
				IS_SNAPSHOT=true
			fi
		done
	fi

	# Execute the actual build

	ANT_OPTS="$ANT_OPTS" ant $@ | tee -a $GIT_ROOT/.redeploy/compile.txt

	pushd $GIT_ROOT > /dev/null

	if [ "" == "${IS_SNAPSHOT}" ]; then
		git ls-files | grep -vF modules | grep -F bnd.bnd | xargs git checkout
	fi

	popd > /dev/null

	# Report the completion time

	echo "Completed $(date)" | tee -a $GIT_ROOT/.redeploy/compile.txt
}

setopts() {
	. $(dirname ${BASH_SOURCE[0]})/../setopts
}

unziposgijar() {
	. $(dirname "${BASH_SOURCE[0]}")/../unziposgijar $@
}

unzipportaljar() {
	. $(dirname "${BASH_SOURCE[0]}")/../unzipportaljar $@
}

time safeant $@