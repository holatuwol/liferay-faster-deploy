#!/bin/bash

baseline() {
	echo "Running baseline check"

	$(dirname "${BASH_SOURCE[0]}")/baseline $@
}

checkrepomode() {
	local SUBREPO_CHANGES=

	cat ${GIT_ROOT}/.redeploy/changes_ant.txt ${GIT_ROOT}/.redeploy/changes_gradle_1.txt ${GIT_ROOT}/.redeploy/changes_gradle_2.txt > ${GIT_ROOT}/.redeploy/central.txt

	for subrepo_folder in $(git ls-files modules | grep -F '.gitrepo' | xargs grep -Fl 'mode = pull' | dirnames); do
		if [ "" == "$(grep -F $subrepo_folder ${GIT_ROOT}/.redeploy/changes_gradle_2.txt)" ]; then
			continue
		fi

		# Make sure to exclude it from the known changes in central

		grep -vF $subrepo_folder ${GIT_ROOT}/.redeploy/central.txt > ${GIT_ROOT}/.redeploy/central.txt.tmp
		rm ${GIT_ROOT}/.redeploy/central.txt
		mv ${GIT_ROOT}/.redeploy/central.txt.tmp ${GIT_ROOT}/.redeploy/central.txt

		# Generate patch files and remember what we generated

		SUBREPO_ROOT=$SUBREPO_ROOT $(dirname ${BASH_SOURCE})/subrepos $subrepo_folder

		local remote_location=$(grep -F 'remote = ' $subrepo_folder/.gitrepo | cut -d'=' -f 2)
		local remote_project=$(echo "$remote_location" | cut -d'/' -f 2 | cut -d'.' -f 1)

		SUBREPO_CHANGES="${SUBREPO_CHANGES}*${remote_location}\n"

		pushd $subrepo_folder > /dev/null

		for patch_file in $(git format-patch -o $SUBREPO_ROOT/${remote_project}/ --relative ${upstream_remote}/${BASE_BRANCH} -- .); do
			SUBREPO_CHANGES="${SUBREPO_CHANGES}    ${patch_file}\n"
		done
	done

	if [ "" == "$SUBREPO_CHANGES" ]; then
		return 0
	fi

	echo -e "\nThis pull request must be split between repositories\n"

	if [[ 0 -ne $(cat ${GIT_ROOT}/.redeploy/central.txt | grep -c '^') ]]; then
		echo "* $(git remote -v | grep "^${upstream_remote}\s" | awk '{ print $2 }' | uniq)"
		cat ${GIT_ROOT}/.redeploy/central.txt | awk '{ print "'"'"'" ${1} "/'"'"'" }' | xargs git format-patch ${upstream_remote}/${BASE_BRANCH} -- | awk '{ print "    ./" ${1} }'
	fi

	echo -e "$SUBREPO_CHANGES"

	echo "Create and switch to a new branch in each repository and run:"
	echo ''
	echo '    ls -1 *.patch | sort | xargs git am'
	echo ''

	return 1
}

dirnames() {
	python $(dirname "${BASH_SOURCE[0]}")/../dirnames.py
}

findreviewer() {
	. $(dirname "${BASH_SOURCE[0]}")/findreviewer "$*"
}

formatsource() {
	echo "Running source formatter"

	$(dirname "${BASH_SOURCE[0]}")/formatsource $@
}

pmdreport() {
	echo "Running PMD report"

	$(dirname "${BASH_SOURCE[0]}")/pmdreport
}

resetbasebranch() {
	reviewer_remote=$(git config --get remote.${upstream_remote}.url | sed "s@:[^/]*/@:${reviewer}/@")

	git fetch --no-tags ${upstream_remote} ${BASE_BRANCH}
	git branch -D reviewer-tmp-rebase
	git fetch --no-tags ${reviewer_remote} ${BASE_BRANCH}:reviewer-tmp-rebase

	NEW_BASELINE='reviewer-tmp-rebase'

	. $(dirname "${BASH_SOURCE[0]}")/../rebasebranch

	return $?
}

sendpull() {
	if [ "" == "${1}" ]; then
		echo Please specify a reviewer
		return 1
	fi

	# Figure out where we are pushing our branch

	local CURRENT_BRANCH=$(git symbolic-ref --short HEAD)

	if [ "" == "${CURRENT_BRANCH}" ]; then
		echo "Cannot submit a pull request from a detached head"
		return 1
	fi

	. $(dirname "${BASH_SOURCE[0]}")/../getparent

	remote_name=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/origin[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)

	if [ "" == "$remote_name" ]; then
		echo "Unable to identify origin for ${BASE_BRANCH}"
		return 1
	fi

	if [ "" == "${BASE_BRANCH}" ]; then
		echo Unable to identify base branch
		return 1
	fi

	if [ "master" == "${CURRENT_BRANCH}" ]; then
		echo Attempted to submit pull request from master
		return 1
	fi

	# Figure out who we are sending things for review

	findreviewer $@

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	echo "Reviewer: ${reviewer}"

	# Rebase against the upstream variant of the branch

	upstream_remote=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/${BASE_BRANCH}$" | cut -d'/' -f 3)

	if [ "" == "$upstream_remote" ]; then
		echo "Unable to identify upstream equivalent of ${BASE_BRANCH}"
		return 1
	fi

	resetbasebranch

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	if [ -d "${GIT_ROOT}/portal-impl" ]; then
		pushd ${GIT_ROOT} > /dev/null

		. $(dirname "${BASH_SOURCE[0]}")/../gitchanges $(git log -1 --pretty='%H') ${upstream_remote}/${BASE_BRANCH}

		if [[ 0 -eq $(cat ${GIT_ROOT}/.redeploy/changes.txt | grep -c '^') ]]; then
			echo No changes detected.
			return 0
		fi

		checkrepomode

		if [[ 0 -eq $? ]]; then
			if [ "" != "$(grep setup-libs build.xml)" ]; then
				ant setup-sdk
			fi

			baseline ${upstream_remote}/${BASE_BRANCH} && formatsource ${upstream_remote}/${BASE_BRANCH} && pmdreport
		fi

		popd > /dev/null

		HAS_CHANGES=$(git status -s | grep -vF '??' | grep -vF gradle.properties)

		if [ "" != "${HAS_CHANGES}" ]; then
			echo "Detected files modified during sanity check, please commit them before sending a pull request"
		fi
	fi

	# Update our origin

	git push -f $remote_name ${CURRENT_BRANCH}

	if [[ 0 -ne $? ]]; then
		return 1
	fi

	# Open a web browser so we can submit the pull request

	current_user=$(git remote -v | grep origin | cut -d':' -f 2 | cut -d'/' -f 1 | sort -u)
	reviewer_repository=$(git remote -v | grep "^${upstream_remote}\s" | awk '{ print $2 }' | uniq | cut -d'/' -f 2 | sed 's/\.git$//g' | uniq)

	if [ "" == "${reviewer_repository}" ]; then
		reviewer_repository=$(git remote -v | grep "^${remote_name}\s" | awk '{ print $2 }' | uniq | cut -d'/' -f 2 | sed 's/\.git$//g' | uniq)
	fi

	if [ "" == "$(git status -s | grep '^M')" ]; then
		webbrowser "https://github.com/${reviewer}/${reviewer_repository}/compare/${BASE_BRANCH}...${current_user}:${CURRENT_BRANCH}"
	else
		git status -s
		echo "https://github.com/${reviewer}/${reviewer_repository}/compare/${BASE_BRANCH}...${current_user}:${CURRENT_BRANCH}"
	fi
}

setopts() {
	. $(dirname "${BASH_SOURCE[0]}")/../setopts
}

webbrowser() {
	python $(dirname "${BASH_SOURCE[0]}")/../webbrowser_patch.py "${1}"
}

setopts

if [ "" == "$SUBREPO_ROOT" ]; then
	echo 'Please specify the root folder for subrepositories'
	exit 1
fi

if [[ 0 -ne $? ]]; then
	exit 1
fi

sendpull $@