#!/bin/bash

# Running this will display a filterable list of modules
# Once you select one, you will navigate to it
# You can call it with an argument to be used as a pre-filter on the module list

# Requires 'fzf', I highly recommend it.
# https://github.com/junegunn/fzf
# In this case, 'fzf' is reading from stdin

# USAGE EXAMPLES
# gm              (will present the full list of modules)
# gm segments     (will present a list of modules pre-filtered by "segments")

function gm() {
	# The optional filter pattern. If none is given, all modules will be shown
	local PATTERN
	PATTERN="$1"

	# Find the root of the Git project.
	local PROJECT_ROOT
	PROJECT_ROOT="$(git rev-parse --show-toplevel)"

	# Get the module path
	local MODULE_PATH
	MODULE_PATH="$(
		# List all files at project root
		git -C "${PROJECT_ROOT}" ls-files -- '*/bnd.bnd' '*/build.gradle' |
		# Strip the filename, leaving just the directory name.
		# On OSX, this WAY faster than using "dirname".
		sed -E 's,/[^/]*$,,g' |
		# Gets rid of any duplicates in case a module has more than one *.bnd file
		uniq |
		# Pass the results to 'fzf' so the user can choose
		fzf --query "${PATTERN}" --select-1 --exit-0
	)"

	# If you actually chose a module path, navigate to it. Otherwise do nothing.
	if [ -n "${MODULE_PATH}" ]
	then
		cd "${PROJECT_ROOT}/${MODULE_PATH}" || return 1
	fi
}