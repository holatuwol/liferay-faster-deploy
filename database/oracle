#!/bin/bash

. "$(dirname ${BASH_SOURCE[0]})/common"

execute_script() {
	if [ "" == "${SYS_PASSWORD}" ]; then
		SYS_PASSWORD=$(docker logs ${CONTAINER_NAME} | grep -F PASSWORD | cut -d':' -f 2 | sed 's/^ *//g')

		if [ "" == "${SYS_PASSWORD}" ]; then
			SYS_PASSWORD="$(date +%s | sha256sum | base64 | head -c 16 ; echo)"
			echo "sys password will be set to ${SYS_PASSWORD}"
			docker exec -it ${CONTAINER_NAME} ./setPassword.sh ${SYS_PASSWORD}
		else
			echo "sys password was set to ${SYS_PASSWORD}"
		fi
	fi

	echo "================================"
	echo "${1}"
	echo "================================"

	echo -e "ALTER SESSION SET \"_ORACLE_SCRIPT\"=true;\n\n${1}\n\ncommit;" | \
	  docker exec -i ${CONTAINER_NAME} sqlplus sys/\"${SYS_PASSWORD}\"@//localhost:1521/${ORACLE_SID} as sysdba
}

restorebackup_helper() {
	echo "Restoring database backup as ${1}..."

	execute_script "create or replace directory export_lportal as '${BACKUP_FOLDER_NAME}';

grant read, write on directory export_lportal to lportal;
grant ${1} to lportal;"

	local FILENAME=$(docker exec -i ${CONTAINER_NAME} ls -1 ${BACKUP_FOLDER_NAME} | grep -iF '.dmp' | tr '\n' ',')

	docker exec -e ORACLE_SID=${ORACLE_SID} -i ${CONTAINER_NAME} \
		impdp lportal/lportal \
			dumpfile="${FILENAME}" \
			directory=export_lportal \
			logfile=import_log.txt \
			sqlfile=ddl_dump.txt \
			< /dev/null

	local OLD_TABLESPACE=$(
		docker exec -i ${CONTAINER_NAME} grep -o 'TABLESPACE "[^"]*"' ${BACKUP_FOLDER_NAME}/ddl_dump.txt | cut -d'"' -f 2 | sort -u | grep -v '^\(SYS\|TEMP\|UNDO\)'
		docker exec -i ${CONTAINER_NAME} grep -o "TABLESPACE_NAME = ''[^']''" ${BACKUP_FOLDER_NAME}/ddl_dump.txt | cut -d'"' -f 2 | sort -u | grep -v '^\(SYS\|TEMP\|UNDO\)'
	)

	local NEW_TABLESPACES='full=yes'

	if [ "dba" == "${1}" ]; then
		execute_script "$(echo "${OLD_TABLESPACE}" | awk '{ print "CREATE TABLESPACE " $1 " DATAFILE \x27" $1 ".dbf\x27 SIZE 64m AUTOEXTEND ON NEXT 32m MAXSIZE UNLIMITED; " }')"

		execute_script "$(docker exec -i ${CONTAINER_NAME} cat ${BACKUP_FOLDER_NAME}/ddl_dump.txt | tr '\n' ' ' | grep -o 'CREATE USER "[^"]*"[^'"'"']*'"'"'[^'"'"']*'"'"'[^;]*;' | cut -d'"' -f 2,4 | sed 's/"/ IDENTIFIED BY lportal DEFAULT TABLESPACE /g' | sed 's/^/CREATE USER /g' | sed 's/$/;/g')"

		execute_script "$(docker exec -i ${CONTAINER_NAME} grep -o 'CREATE USER ".*"' ${BACKUP_FOLDER_NAME}/ddl_dump.txt | cut -d'"' -f 2 | awk '{ print "CREATE USER " $1 " IDENTIFIED BY lportal DEFAULT TABLESPACE lportal; GRANT create session, resource, unlimited tablespace TO " $1 ";" }')"
	else
		NEW_TABLESPACES=$(echo "${OLD_TABLESPACE}" | awk '{print "remap_tablespace=" $1 ":lportal"}' | tr '\n' ' ')
	fi

	docker exec -e ORACLE_SID=${ORACLE_SID} -i ${CONTAINER_NAME} \
		impdp lportal/lportal \
			directory=export_lportal \
			dumpfile=${FILENAME} \
			${NEW_TABLESPACES} exclude='STATISTICS' \
			table_exists_action=TRUNCATE version=${ORACLE_COMPAT_VERSION} \
			LOGFILE=import_log.txt \
			< /dev/null

	execute_script "revoke ${1} from lportal;"
}

restorebackup() {
	if [ "dba" == "${DB_IMPORT_TYPE}" ]; then
		restorebackup_helper dba
	else
		restorebackup_helper imp_full_database
	fi
}

startdatabase() {
	if docker inspect ${CONTAINER_NAME} 1>/dev/null 2>/dev/null; then
		echo "Using existing container ${CONTAINER_NAME}"
		docker start ${CONTAINER_NAME}
		return 0
	fi

	if ! docker image inspect ${ORACLE_VERSION} 1>/dev/null 2>/dev/null; then
		echo "Please build the Oracle image for ${ORACLE_VERSION}"
		echo 'https://github.com/oracle/docker-images'
		return 1
	fi

	docker run --name ${CONTAINER_NAME} \
		-e 'ORACLE_CHARACTERSET=AL32UTF8' \
		-e "ORACLE_PDB=${ORACLE_PDB}" \
		--detach -p 1521:1521 ${ORACLE_VERSION}

	waitfor_database

	execute_script "SELECT value FROM NLS_DATABASE_PARAMETERS WHERE parameter = 'NLS_CHARACTERSET';

ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;

CREATE TABLESPACE lportal DATAFILE 'lportal.dbf' SIZE 64m AUTOEXTEND ON NEXT 32m MAXSIZE UNLIMITED;

CREATE USER lportal IDENTIFIED BY lportal DEFAULT TABLESPACE lportal;
GRANT create session, resource, unlimited tablespace TO lportal;

CREATE UNDO TABLESPACE lportal_undo DATAFILE 'lportal_undo.dpf' SIZE 64m AUTOEXTEND ON NEXT 32m MAXSIZE UNLIMITED;
ALTER TABLESPACE lportal_undo RETENTION GUARANTEE;
ALTER SYSTEM SET UNDO_TABLESPACE=lportal_undo SCOPE=BOTH;"
}

updateprops() {
	if [ "" == "${LIFERAY_HOME}" ]; then
		return 0
	fi

	if [ "" == "${DB_HOST_NAME}" ]; then
		DB_HOST_NAME=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME})
		echo "Oracle database is started with IP address ${DB_HOST_NAME}"
	fi

	echo "Updating ${LIFERAY_HOME}/portal-ext.properties with database connection information"

	if [ -f ${LIFERAY_HOME}/portal-ext.properties ]; then
		if [ "" != "$(grep -F ${DB_HOST_NAME} ${LIFERAY_HOME}/portal-ext.properties | grep -vF '#')" ]; then
			return 0
		fi

		sed -i.bak 's/^jdbc.default/#jdbc.default/g' ${LIFERAY_HOME}/portal-ext.properties
	fi

	echo "
jdbc.default.driverClassName=oracle.jdbc.OracleDriver
jdbc.default.url=jdbc:oracle:thin:@${DB_HOST_NAME}:1521/${ORACLE_SID}
jdbc.default.username=lportal
jdbc.default.password=lportal
" >> ${LIFERAY_HOME}/portal-ext.properties
}

waitfor_database() {
	echo 'Waiting for database health check to pass...'

	local HEALTH=$(docker inspect --format "{{json .State.Health.Status }}" ${CONTAINER_NAME} | cut -d'"' -f 2)

	while [ "healthy" != "$HEALTH" ]; do
		sleep 1
		HEALTH=$(docker inspect --format "{{json .State.Health.Status }}" ${CONTAINER_NAME} | cut -d'"' -f 2)
	done

	echo 'Waiting for database ready message...'

	while [ "" == "$(docker logs ${CONTAINER_NAME} | grep -F 'DATABASE IS READY TO USE!')" ]; do
		sleep 1
	done

	echo 'Database startup complete!'
}

DB_TYPE='oracle'

DB_IMPORT_TYPE='normal'

if [ "dba" == "${2}" ]; then
	DB_IMPORT_TYPE='dba'
fi

if [ "" == "${ORACLE_VERSION}" ]; then
	ORACLE_VERSION="container-registry.oracle.com/database/free:23.3.0.0"
fi

ORACLE_PDB=orcl
ORACLE_SID=ORCLCDB

if [[ ${ORACLE_VERSION} == container-registry.oracle.com/database/free:* ]]; then
	ORACLE_PDB=FREEPDB1
	ORACLE_SID=FREE

	if [ -f compose.yml ]; then
		SYS_PASSWORD=$(grep ORACLE_PWD compose.yml | cut -d':' -f 2- | sed 's/^ *//g')
	fi
fi

CONTAINER_USER_NAME='oracle:dba'

if [ "" == "${ORACLE_COMPAT_VERSION}" ]; then
	ORACLE_COMPAT_VERSION=$(echo "${ORACLE_VERSION}" | cut -d':' -f 2 | cut -d'-' -f 1 | cut -d'.' -f 1,2,3)
fi

BACKUP_FOLDER_NAME='/home/oracle/backup'

runcontainer $@