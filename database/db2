#!/bin/bash

. "$(dirname ${BASH_SOURCE[0]})/common"

restorebackup() {
	docker exec -u db2inst1 ${CONTAINER_NAME} bash -c 'cd "$(dirname "$(find /home/db2inst1/backup -name db2move.lst)")"; ls *.gz | xargs gunzip; /home/db2inst1/sqllib/bin/db2move lportal import | tee /home/db2inst1/import.log'

	local SCHEMA_NAME=$(docker exec ${CONTAINER_NAME} bash -c "grep 'IMPORT:' /home/db2inst1/import.log | cut -d'\"' -f 2 | uniq")

	if [ "" != "${SCHEMA_NAME}" ]; then
		sed -i.bak "s/currentSchema=[^;]*;/currentSchema=${SCHEMA_NAME};/g" ${LIFERAY_HOME}/portal-ext.properties

		echo "
connect to lportal;
grant createin, alterin, dropin on schema ${SCHEMA_NAME} to lportal;
		" > privileges.sql

		for table in $(docker exec ${CONTAINER_NAME} bash -c "grep 'IMPORT:' /home/db2inst1/import.log | cut -d'\"' -f 2,3,4" | sed 's/"//g'); do
			echo "grant all on ${table} to lportal;" >> privileges.sql
		done
	fi

	docker cp privileges.sql ${CONTAINER_NAME}:/home/db2inst1/
	docker exec ${CONTAINER_NAME} chown ${CONTAINER_USER_NAME} /home/db2inst1/privileges.sql
	docker exec -u db2inst1 ${CONTAINER_NAME} /home/db2inst1/sqllib/bin/db2 -tvmf /home/db2inst1/privileges.sql
}

startdatabase() {
	if docker inspect ${CONTAINER_NAME} 1>/dev/null 2>/dev/null; then
		echo "Using existing container ${CONTAINER_NAME}"
		docker start ${CONTAINER_NAME}
		return 0
	fi

	random_password > dbpass.txt

	local DB2INST1_PASSWORD=$(cat dbpass.txt)

	docker run --name ${CONTAINER_NAME} \
		-e DB2INST1_PASSWORD="${DB2INST1_PASSWORD}" -e LICENSE=accept \
		--detach -p 50000:50000 ibmcom/db2express-c:${DB2_VERSION} db2start

	docker cp dbpass.txt ${CONTAINER_NAME}:/home/db2inst1/

	echo '
create database lportal using codeset utf8 territory us pagesize 32 k temporary tablespace managed by automatic storage;
update database configuration for lportal using LOGFILSIZ 10000;
update database configuration for lportal using LOGPRIMARY 8;
update database configuration for lportal using LOGSECOND 248;
	' > setup.sql

	docker cp setup.sql ${CONTAINER_NAME}:/home/db2inst1/
	docker exec ${CONTAINER_NAME} chown ${CONTAINER_USER_NAME} /home/db2inst1/setup.sql
	docker exec -u db2inst1 ${CONTAINER_NAME} /home/db2inst1/sqllib/bin/db2 -tvmf /home/db2inst1/setup.sql

	docker exec ${CONTAINER_NAME} yum install -y unzip zip
	docker exec ${CONTAINER_NAME} useradd -g db2iadm1 lportal
	docker exec ${CONTAINER_NAME} bash -c 'echo "lportal:lportal" | chpasswd'
}

updateprops() {
	if [ "" == "${DB_HOST_NAME}" ]; then
		local DB_HOST_NAME=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME})
		echo "DB2 database is started with IP address ${DB_HOST_NAME}"
	fi


	echo "Updating ${LIFERAY_HOME}/portal-ext.properties with database connection information"

	if [ -f ${LIFERAY_HOME}/portal-ext.properties ]; then
		if [ "" != "$(grep -F ${DB_HOST_NAME} ${LIFERAY_HOME}/portal-ext.properties | grep -vF '#')" ]; then
			return 0
		fi

		sed -i.bak 's/^jdbc.default/#jdbc.default/g' ${LIFERAY_HOME}/portal-ext.properties
	fi

	echo "
jdbc.default.driverClassName=com.ibm.db2.jcc.DB2Driver
jdbc.default.url=jdbc:db2://${DB_HOST_NAME}:50000/lportal:deferPrepares=false;fullyMaterializeInputStreams=true;fullyMaterializeLobData=true;progresssiveLocators=2;progressiveStreaming=2;currentSchema=ADD_SCHEMA_NAME_HERE;
jdbc.default.username=lportal
jdbc.default.password=lportal
" >> ${LIFERAY_HOME}/portal-ext.properties
}

waitfor_database() {
	echo 'Waiting for database startup to complete...'

	echo 'Database startup complete!'
}

DB_TYPE='db2'

if [ "" == "${DB2_VERSION}" ]; then
	DB2_VERSION='10.5.0.5-3.10.0'
fi

CONTAINER_USER_NAME='db2inst1:db2inst1'
BACKUP_FOLDER_NAME='/home/db2inst1/backup'

runcontainer $@