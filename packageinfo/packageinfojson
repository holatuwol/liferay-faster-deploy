#!/bin/bash

SCRIPT_FOLDER=$(dirname $0)

s3upload() {
	. ${SCRIPT_FOLDER}/s3upload $1
}

# Make sure the packageinfo files are up to date

AVAILABLE_VERSIONS=$(git ls-remote -t git@github.com:liferay/liferay-portal.git | awk '{ print $2 }' | grep "/[0-9].*-ga[0-9]*$" | sort | cut -d'/' -f 3 | cut -d'.' -f 1,2 | sort -u)

if [ "update" == "${1}" ]; then
	. $(dirname ${BASH_SOURCE[0]})/../setopts
	. ${SCRIPT_FOLDER}/packageinfo

	if [ "" == "${2}" ]; then
		if [ "" != "${PACKAGEINFO_ROOT}" ]; then
			for version in ${AVAILABLE_VERSIONS}; do
				packageinfo_release ${PACKAGEINFO_ROOT}/${version}.x/portal ${version} $(echo ${version} | tr -d '.')
			done
		fi
	else
		packageinfo_tag $2
	fi
fi

# Generate the JSON files

if [ "" != "${PACKAGEINFO_ROOT}" ]; then
	echo "${AVAILABLE_VERSIONS}" | awk '{ print "'${PACKAGEINFO_ROOT}'/" $1 ".x" }' | xargs python ${SCRIPT_FOLDER}/packageinfojson.py
	echo "${AVAILABLE_VERSIONS}" | awk '{ print "'${PACKAGEINFO_ROOT}'/" $1 ".x" }' | xargs python ${SCRIPT_FOLDER}/requireschemajson.py
fi

PORTAL_SOURCE_ROOT=${PACKAGEINFO_ROOT}/7.0.x/portal ${SCRIPT_FOLDER}/jsversions > dxpjslibrary.json

# Upload the files to the designated bucket

if [ "" != "${S3_BUCKET}" ]; then
	for file in dxppackages dxpmodules dxpschemas dxpjslibrary mpmodules; do
		s3upload ${file}.json

		pushd $(dirname ${BASH_SOURCE[0]}) > /dev/null

		s3upload ${file}.html
		s3upload ${file}.js

		popd > /dev/null
	done

	if [ "" != "${PACKAGEINFO_ROOT}" ]; then
		pushd /tmp > /dev/null

		for version in ${AVAILABLE_VERSIONS}; do
			short_version=$(echo "${version}" | tr -d '.')
			rm -f metadata-${short_version}x.zip
			zip -jqqr metadata-${short_version}x.zip ${PACKAGEINFO_ROOT}/${version}.x/metadata
			s3upload metadata-${short_version}x.zip
		done

		popd > /dev/null
	fi
fi