#!/bin/bash

remove_fixes() {
  for TEST_HASH in $(git diff --name-only ${BASE_TAG}..HEAD | grep -F "${1}" | xargs -r git log ${BASE_TAG}..HEAD --pretty='%H' --); do
    GIT_SEQUENCE_EDITOR="sed -i -re '1s/^pick /e /'" git rebase -i ${TEST_HASH}~1
    git diff --name-only HEAD~1..HEAD | grep -F "${1}" | xargs git reset HEAD~1 -- ${file}
    git status -s | grep '^.M' | awk '{ print $2 }' | xargs -r git checkout
    git commit --amend --allow-empty --no-edit
    git rebase --continue
  done
}

fix_dependencies() {
	if [[ ${2} == com.liferay.portal.* ]]; then
		sed -i.bak "/${2}/s/version: \"[1-9][^\"]*\"/version: \"default\"/g" ${1}
	else
		local project=$(git ls-files | grep -F bnd.bnd | xargs grep -l ": ${2}$" | sed 's@/bnd\.bnd$@@g' | sed 's@^modules@@g' | tr '/' ':')

		if [ "" != "${project}" ]; then
			sed -i.bak "/${2}/s/group:.*$/project(\"${project}\")/g" ${1}
		fi
	fi

	git add ${1}
}

checkcommonerrors() {
	local PATCHER_JSON=$(dirname "${BASH_SOURCE[0]}")/patcher_projects.json
	local BASELINE_ID=$(cat ${PATCHER_JSON} | jq '.["'${BASE_TAG}'"]')

	if [ "" == "${BASELINE_ID}" ]; then
		echo ${BASE_TAG} does not correspond to a known patcher portal baseline
		return 1
	fi

	for TAG in $(cat ${PATCHER_JSON} | jq 'keys | .[]' | cut -d'"' -f 2 | grep -vF '.x'); do
		if [ "" == "$(git for-each-ref --format='%(refname)' refs/tags/${TAG})" ]; then
			git fetch --no-tags git@github.com:liferay/liferay-portal-ee.git tags/${TAG}:refs/tags/${TAG}
		fi
	done

	# Make sure that we have not modified any packageinfo files

	git diff --name-only ${BASE_TAG}..HEAD > ${GIT_ROOT}/.redeploy/patcher_diff.txt

	# Make sure that we have not modified any Bundle-Version values

	local CHANGED_BND=$(grep -F '/bnd.bnd' ${GIT_ROOT}/.redeploy/patcher_diff.txt)
	local MODIFIED_BUNDLE_VERSION=

	for file in ${CHANGED_BND}; do
		if [ "" != "$(git diff ${BASE_TAG}..HEAD -- ${file} | grep '^+' | grep -F Bundle-Version)" ]; then
			MODIFIED_BUNDLE_VERSION="${MODIFIED_BUNDLE_VERSION} ${file}"
		fi
	done

	if [ "" != "${MODIFIED_BUNDLE_VERSION}" ]; then
		echo ""
		echo "A fix must not modify a Bundle-Version: ${file}"

		for file in ${CHANGED_PACKAGEINFO}; do
			echo ""
			echo "${file}"
			git log --pretty='   %C(yellow)%H%Creset %Cgreen%ci%Creset %s' ${BASE_TAG}..HEAD -- ${file}
		done
	fi

	local CHANGED_GRADLE=$(grep -F '/build.gradle' ${GIT_ROOT}/.redeploy/patcher_diff.txt)
	local MODIFIED_GRADLE_VERSION=
	local PORTAL_BOOTSTRAP=$(git ls-files modules/core | grep -F portal-bootstrap/build.gradle)

	for file in ${CHANGED_GRADLE}; do
		if [ "" != "$(git diff ${BASE_TAG}..HEAD -- ${file} | grep -F '+' | grep -F 'group: "com.liferay' | grep -F 'version: ')" ]; then
			for bundle in $(git diff ${BASE_TAG}..HEAD -- ${file} | grep -F '+' | grep -F 'group: "com.liferay' | grep -F 'version: ' | grep -o 'name: "[^"]*"' | cut -d'"' -f 2); do
				fix_dependencies "${file}" "${bundle}"
				fix_dependencies "${PORTAL_BOOTSTRAP}" "${bundle}"
			done
		fi

		if [ "" != "$(git status | grep -F "${file}")" ]; then
			MODIFIED_GRADLE_VERSION="${MODIFIED_GRADLE_VERSION}\n${file}"
		fi
	done

	if [ "" != "${MODIFIED_GRADLE_VERSION}" ]; then
		echo ""
		echo "A fix must not modify dependency versions (switch to default or project dependency versions):"
		echo -e "${MODIFIED_GRADLE_VERSION}"

		git add ${PORTAL_BOOTSTRAP}
		echo ""
		git commit -m "Fix dependency versions"
	fi

	# If any of the checks failed, abort

	if [ "" != "${CHANGED_PACKAGEINFO}" ] || [ "" != "${MODIFIED_BUNDLE_VERSION}" ]; then
		echo ""
		return 1
	fi
}

patcher() {
	. $(dirname "${BASH_SOURCE[0]}")/../setopts
	. $(dirname "${BASH_SOURCE[0]}")/../getparent

	if [ "" == "${BASE_TAG}" ]; then
		echo Could not identify baseline.
		return 1
	fi

	if ! checkcommonerrors; then
		return 1
	fi

	remove_fixes 'git-commit-portal'
	remove_fixes 'test/src/'
	remove_fixes 'sample'
	remove_fixes '/packageinfo'

	# Check if there's a pre-existing patch in patcher portal

	local ORIGIN=$(git remote -v | grep liferay-portal-ee | grep -vF ':liferay/' | cut -f 2 | cut -d' ' -f 1 | uniq)

	if [ "" == "$(git for-each-ref --format='%(refname)' refs/${ORIGIN}/${BRANCH})" ]; then
		git push ${ORIGIN} ${BRANCH}
	elif [ "" != "$(git log --pretty='%H' ${ORIGIN}/${BRANCH}..${BRANCH})" ]; then
		git push -f ${ORIGIN} ${BRANCH}
	fi

	python "$(dirname ${BASH_SOURCE[0]})/patcher.py" "${ORIGIN}" $@
}

if [ "" == "$(git config 1password.liferay)" ]; then
	echo "Cannot access patcher portal unless 1password.liferay is set with git config --global"
	exit 1
fi

patcher $@