#!/bin/bash

if [ "" == "$(which conda 2>/dev/null)" ]; then
	PATH="$HOME/miniconda3/bin:$PATH"
fi

pushd $(dirname "${BASH_SOURCE[0]}") > /dev/null
SCRIPT_FOLDER=${HOME}/crontab
popd > /dev/null

if [ "" == "$BUILD_FOLDER_PREFIX" ]; then
	BUILD_FOLDER_PREFIX=$HOME
fi

build() {
	cd $HOME
	rm -f nohup.out
	nohup "$SCRIPT_FOLDER/cronbuild" clean &
	cd -
}

bundle() {
	BRANCH_ARCHIVE_MIRROR=http://localhost/builds/branches/ \
		$SCRIPT_FOLDER/tomcat/bundle "$@"
}

cr() {
	CATALINA_HOME=

	local BUILD_NAME=$(ls /var/www/html/builds/branches | grep "^${1}-[0-9]*.tar.gz" | sort | tail -1)

	if [ "" != "$BUILD_NAME" ]; then
		local TIMESTAMP=$(echo "$BUILD_NAME" | sed "s/^${1}-//g" | cut -d'.' -f 1)

		if [ -d "$BUILD_FOLDER_PREFIX/$1/$TIMESTAMP" ]; then
			rm -rf "$BUILD_FOLDER_PREFIX/$1/$TIMESTAMP"
		fi

		mkdir -p $BUILD_FOLDER_PREFIX/$1/$TIMESTAMP
		tar -zxf /var/www/html/builds/branches/$BUILD_NAME -C $BUILD_FOLDER_PREFIX/$1/$TIMESTAMP/
	fi

	CATALINA_HOME=$(find $BUILD_FOLDER_PREFIX/$1/$TIMESTAMP -type d -name 'tomcat*' | sort -u | tail -1)

	if [ "$1" == "61x" ]; then
		switchport 80 61
	elif [ "$1" == "62x" ]; then
		switchport 80 62
	elif [ "$1" == "70x" ] || [ "$1" == "70x-private" ]; then
		switchport 80 70
	elif [ "$1" == "71x" ] || [ "$1" == "71x-private" ]; then
		switchport 80 71
	elif [ "$1" == "72x" ] || [ "$1" == "72x-private" ]; then
		switchport 80 72
	elif [ "$1" == "73x" ] || [ "$1" == "73x-private" ]; then
		switchport 80 73
	elif [ "$1" == "master" ] || [ "$1" == "master-private" ]; then
		switchport 80 60
	fi

	if [ "" == "$CATALINA_HOME" ]; then
		echo "Failed to find build for $1"
		return 1
	fi

	if [ ! -d "$CATALINA_HOME/bin" ]; then
		return 1
	fi

	cp -f "$HOME/portal-ext.properties" "$BUILD_FOLDER_PREFIX/$1/$TIMESTAMP/"

	echo "Starting latest build of $1"

	$CATALINA_HOME/bin/startup.sh
}

crall() {
	for folder in $(cat $BUILD_FOLDER_PREFIX/run.txt); do
		if [ -d $BUILD_FOLDER_PREFIX/$folder ]; then
			cr ${folder}
		fi
	done
}

cs() {
	cr $@
}

cx() {
	if [ "" == "$1" ]; then
		echo "Please specify which Tomcat process to kill"
		return 1
	fi

	if [ "all" == "$1" ]; then
		ps -ef | grep catalina.base | grep -v grep | awk '{ print $2 }' | xargs kill -9
		return 0
	fi

	ps -ef | grep -F $BUILD_FOLDER_PREFIX/$1 | grep catalina.base | grep -v grep | awk '{ print $2 }' | xargs kill -9
}

ct() {
	if [ -d $HOME/$1 ]; then
		echo "Tailing logs for latest build of $1"
		BUILD_ID=$(ls -1 $HOME/$1 | sort | tail -1)
		/usr/bin/tail -f $HOME/$1/$BUILD_ID/tomcat-*/logs/catalina.out
	elif [ -d $BUILD_FOLDER_PREFIX/$1 ]; then
		echo "Tailing logs for build of pull request $1"
		/usr/bin/tail -f $BUILD_FOLDER_PREFIX/$1/tomcat-*/logs/catalina.out
	fi
}

switchport() {
	if [ "" == "$(grep JPDA_ADDRESS= $CATALINA_HOME/bin/setenv.sh)" ]; then
		echo -e "\nJPDA_ADDRESS=${1}00" >> $CATALINA_HOME/bin/setenv.sh
		echo -e "\r\nset JPDA_ADDRESS=${1}00" >> $CATALINA_HOME/bin/setenv.bat
	fi

	sed -i.bak "s/\"$1/\"$2/g" $CATALINA_HOME/conf/server.xml

	python $SCRIPT_FOLDER/enable_ajp.py $CATALINA_HOME/conf/server.xml

	sed -i.bak "s/JPDA_ADDRESS=${1}/JPDA_ADDRESS=${2}/g" $CATALINA_HOME/bin/setenv.sh
	sed -i.bak "s/JPDA_ADDRESS=${1}/JPDA_ADDRESS=${2}/g" $CATALINA_HOME/bin/setenv.bat

	if [ -d ${CATALINA_HOME}/../osgi ]; then
		local ELASTICSEARCH_JAR=$(find ${CATALINA_HOME}/../osgi -name '*elasticsearch*api.jar')

		if [ "" != "${ELASTICSEARCH_JAR}" ]; then
			local ELASTICSEARCH_FILE=$(unzip -l ${ELASTICSEARCH_JAR} | grep ElasticsearchConfiguration.class | awk '{ print $4 }' | sed 's/.class$/.config/g' | tr '/' '.')

			echo 'embeddedHttpPort="'$2'40"' > ${CATALINA_HOME}/../osgi/configs/${ELASTICSEARCH_FILE}
			echo 'sidecarHttpPort="'$2'40"' >> ${CATALINA_HOME}/../osgi/configs/${ELASTICSEARCH_FILE}
		fi
	fi
}