#!/bin/bash

SCRIPT_FOLDER=$(dirname ${BASH_SOURCE[0]})

addhost() {
	if [ "" == "${1}" ]; then
		return 0
	fi

	local HOSTNAME=$(echo ${1} | grep -o '//[^/]*/' | cut -d'/' -f 3)

	if [ "" == "${HOSTNAME}" ]; then
		HOSTNAME=$(echo ${1} | grep -o '//[^/]*$' | cut -d'/' -f 3)
	fi

	if [ "" == "${HOSTNAME}" ]; then
		echo "Unable to extract host name from ${1}"
		return 0
	fi

	local IP_ADDRESS=$(ping -c 1 ${HOSTNAME} | grep -o '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' | head -1)

	if [ "${HOSTNAME}" == "${IP_ADDRESS}" ]; then
		return 0
	fi

	echo "Mapping ${HOSTNAME} to ${IP_ADDRESS}"

	if [ "" != "${IP_ADDRESS}" ]; then
		ADD_HOST="${ADD_HOST} --add-host=${HOSTNAME}:${IP_ADDRESS}"
	fi
}

copy_driver() {
	if [ "" == "${CATALINA_HOME}" ]; then
		mkdir -p ${LIFERAY_HOME}/tomcat/lib/ext
		CATALINA_HOME=${LIFERAY_HOME}/tomcat
	fi

	. ${SCRIPT_FOLDER}/../database/copydriver
}

create_network() {
	NETWORK_METADATA=

	if [ "" == "${NETWORK_NAME}" ]; then
		if [ -f ${LIFERAY_HOME}/portal-ext.properties ]; then
			local GATEWAY=$(docker network inspect bridge | jq '.[0].IPAM.Config[0].Gateway' | cut -d'"' -f 2)

			sed -i.bak "s/127.0.0.1/${GATEWAY}/g" ${LIFERAY_HOME}/portal-ext.properties
			sed -i.bak "s/localhost/${GATEWAY}/g" ${LIFERAY_HOME}/portal-ext.properties
		fi

		return 0
	fi

	if [ -d ${LIFERAY_HOME}/osgi/portal ] && [ ! -f ${LIFERAY_HOME}/osgi/portal/com.liferay.portal.cluster.multiple.jar ]; then
		echo "Unable to find clustering module in ${LIFERAY_HOME}. If you're trying to cluster, it probably won't work."
	fi

	if docker network inspect ${NETWORK_NAME} 1> /dev/null 2> /dev/null; then
		echo ${CONTAINER_NAME} will join the existing ${NETWORK_NAME} network
	else
		echo ${CONTAINER_NAME} will join the newly-created ${NETWORK_NAME} network
		docker network create ${NETWORK_NAME}
	fi

	NETWORK_METADATA="--network ${NETWORK_NAME} --network-alias ${CONTAINER_NAME} -e IS_CLUSTER=true"
}

notify_finish() {
	if [ "" == "$(which notify-send)" ]; then
		return 0
	fi

	if [[ ${IMAGE_NAME} != holatuwol/liferay:jdk* ]] && [[ ${IMAGE_NAME} != holatuwol/liferay:openjdk* ]]; then
		return 0
	fi

	while [ "" == "$(docker logs --since="${START_TIME}" ${CONTAINER_NAME} 2>&1 | grep -F 'Server startup')" ]; do
		sleep 1
	done

	notify-send -i utilities-terminal -u "critical" "$(pwd; echo -e "bundle (${CONTAINER_NAME})")"
}

remove_container() {
	docker stop ${CONTAINER_NAME} 1> /dev/null 2> /dev/null
	docker rm -v ${CONTAINER_NAME} 1> /dev/null 2> /dev/null
}

set_container_mounts() {
	mkdir -p ${HOME}/.liferay/builds

	LIFERAY_RDBUILD_MOUNT="-v ${HOME}/.liferay/builds:/rdbuild"

	mkdir -p ${HOME}/.liferay/release

	LIFERAY_RELEASE_MOUNT="-v ${HOME}/.liferay/release:/release"

	if [ "" != "${LIFERAY_LICENSE_FOLDER}" ]; then
		LIFERAY_LICENSE_MOUNT="-v ${LIFERAY_LICENSE_FOLDER}:/license"
	fi

	if [ -d ${LIFERAY_HOME}/document_library ]; then
		LIFERAY_RELEASE_MOUNT="${LIFERAY_RELEASE_MOUNT} -v ${LIFERAY_HOME}/document_library:/opt/liferay/data/document_library"
	elif [ -d ${LIFERAY_HOME}/data/document_library ]; then
		LIFERAY_RELEASE_MOUNT="${LIFERAY_RELEASE_MOUNT} -v ${LIFERAY_HOME}/data/document_library:/opt/liferay/data/document_library"
	fi

	if [ -d ${LIFERAY_HOME}/jackrabbit ]; then
		LIFERAY_RELEASE_MOUNT="${LIFERAY_RELEASE_MOUNT} -v ${LIFERAY_HOME}/jackrabbit:/opt/liferay/data/jackrabbit"
	elif [ -d ${LIFERAY_HOME}/data/jackrabbit ]; then
		LIFERAY_RELEASE_MOUNT="${LIFERAY_RELEASE_MOUNT} -v ${LIFERAY_HOME}/data/jackrabbit:/opt/liferay/data/jackrabbit"
	fi

	if [ "" != "${LIFERAY_HOME}" ]; then
		LIFERAY_HOME_MOUNT="-v ${LIFERAY_HOME}:/build"
	elif [ "$PWD" == "${HOME}" ]; then
		echo "Unable to determine LIFERAY_HOME"
		echo "Please run from a folder other than ${HOME} containing portal-ext.properties"
		return 1
	elif [ -f portal-ext.properties ] || [ -d drivers ] || [ -d patches ]; then
		LIFERAY_HOME=${PWD}
		LIFERAY_HOME_MOUNT="-v ${PWD}:/build"
	elif [ -d bundles ]; then
		LIFERAY_HOME="${PWD}/bundles"
		LIFERAY_HOME_MOUNT="-v ${PWD}/bundles:/build"
	elif . "$(dirname ${SCRIPT_FOLDER})/appserverprops"; then
		LIFERAY_HOME_MOUNT="-v ${LIFERAY_HOME}:/build"
	else
		echo "Unable to determine LIFERAY_HOME"
		echo "Please touch portal-ext.properties if you wish to use the current folder as LIFERAY_HOME"
		return 1
	fi

	local WEBAPPS_FOLDER="$(find ${LIFERAY_HOME} -mindepth 2 -maxdepth 2 -type d -name webapps | tail -1)"

	if [ "" != "${WEBAPPS_FOLDER}" ]; then
		local TOMCAT_FOLDER="$(dirname "${WEBAPPS_FOLDER}")"

		if [ "" != "$1" ]; then
			echo "You asked to start a container running $1 rather than a bundle built from source"
			echo "However, '${TOMCAT_FOLDER}' is present in ${LIFERAY_HOME} that would be copied to the container"
			echo "Cowardly refusing to create the Docker container"
			return 1
		else
			CATALINA_HOME="${TOMCAT_FOLDER}"
		fi
	else
		CATALINA_HOME="${LIFERAY_HOME}/tomcat"
	fi
}

set_container_name() {
	if [ "" != "${CONTAINER_NAME}" ]; then
		return 0
	fi

	if [ "" != "$1" ] && [[ $1 =~ ^[0-9]*$ ]]; then
		CONTAINER_NAME="test$1"
	else
		CONTAINER_NAME="$1"
	fi
}

set_image_name_by_patch() {
	if [[ $1 == 6.1.* ]] || [[ $1 == *-6130 ]] || [[ $1 == fix-pack-base-6130-sp* ]] || [[ $1 == *-6130.zip ]]; then
		IMAGE_NAME="holatuwol/liferay:jdk6"
		return 0
	elif [[ $1 == portal-* ]] || [[ $1 == 6.2.* ]] || [[ $1 == *-6210 ]] || [[ $1 == fix-pack-base-6210-sp* ]] || [[ $1 == *-6210.zip ]]; then
		IMAGE_NAME="holatuwol/liferay:openjdk7"
		return 0
	elif [[ $1 == de-* ]] || [[ $1 == 7.0.* ]] || [[ $1 == *-7010 ]] || [[ $1 == *-7010.zip ]]; then
		IMAGE_NAME="holatuwol/liferay:openjdk8"
		return 0
	elif [[ $1 == 7.1.* ]] || [[ $1 == *-7110 ]] || [[ $1 == *-7110.zip ]]; then
		IMAGE_NAME="holatuwol/liferay:openjdk8"
		return 0
	elif [[ $1 == 7.2.* ]] || [[ $1 == *-7210 ]] || [[ $1 == *-7210.zip ]]; then
		IMAGE_NAME="holatuwol/liferay:openjdk8"
		return 0
	elif [[ $1 == 7.3.* ]] || [[ $1 == *-7310 ]] || [[ $1 == *-7310.zip ]]; then
		IMAGE_NAME="holatuwol/liferay:openjdk8"
		return 0
	elif [[ $1 == 7.4.* ]] || [[ $1 == *-7413 ]] || [[ $1 == *-7413.zip ]]; then
		IMAGE_NAME="holatuwol/liferay:openjdk8"
		return 0
	elif [ "master" == "$1" ]; then
		IMAGE_NAME="holatuwol/liferay:openjdk8"
		return 0
	elif [ "" == "${LIFERAY_HOME}" ]; then
		IMAGE_NAME="holatuwol/liferay:openjdk8"
		return 0
	fi
}

set_image_name() {
	if [ "" != "${IMAGE_NAME}" ]; then
		return 0
	fi

	set_image_name_by_patch $1

	if [ "" != "${IMAGE_NAME}" ]; then
		return 0
	fi

	if [ -d "${LIFERAY_HOME}/patches" ]; then
		for file in ${LIFERAY_HOME}/patches/*; do
			set_image_name_by_patch ${file}

			if [ "" != "${IMAGE_NAME}" ]; then
				return 0
			fi
		done
	fi

	# Use portal-kernel/portal-service to determine the current
	# Liferay version in order to decide on the Java version to use

	local RELEASE_INFO_JAR=$(find "${LIFERAY_HOME}" -name portal-kernel.jar)

	if [ "" == "${RELEASE_INFO_JAR}" ]; then
		RELEASE_INFO_JAR=$(find "${LIFERAY_HOME}" -name portal-service.jar)
	fi

	if [ "" == "${RELEASE_INFO_JAR}" ]; then
		echo "Unable to find portal-kernel.jar or portal-service.jar in ${LIFERAY_HOME}"
		return 1
	fi

	echo "Attempting to detect version using ${RELEASE_INFO_JAR}"

	echo 'public class GetReleaseInfo { public static void main( String[] args ) { System.out.print( com.liferay.portal.kernel.util.ReleaseInfo.getBuildNumber() ); } }' > GetReleaseInfo.java
	javac -classpath ".:${RELEASE_INFO_JAR}" GetReleaseInfo.java

	local RELEASE_NUMBER=$(java -classpath ".:${RELEASE_INFO_JAR}" GetReleaseInfo)

	if [[ ${RELEASE_NUMBER} == 61* ]]; then
		IMAGE_NAME="holatuwol/liferay:jdk6"
	elif [[ ${RELEASE_NUMBER} == 62* ]]; then
		IMAGE_NAME="holatuwol/liferay:openjdk7"
	else
		IMAGE_NAME="holatuwol/liferay:openjdk8"
	fi
}

start_liferay() {
	if [ "" == "${TOMCAT_PORT}" ]; then
		TOMCAT_PORT=$2
	fi

	if [ "" == "${TOMCAT_PORT}" ]; then
		TOMCAT_PORT=$(python "${SCRIPT_FOLDER}/getport.py")
	fi

	if [ "" == "${TOMCAT_PORT}" ]; then
		TOMCAT_PORT=8080
	fi

	if [ "" != "$3" ]; then
		set_container_name $3
	else
		set_container_name ${TOMCAT_PORT}
	fi

	remove_container
	create_network
	copy_driver

	local INCREMENT=$(expr ${TOMCAT_PORT} '-' 8080)
	local GLOBAL_BIND="$(echo 8009 8080 8443 | tr ' ' '\n' | awk '{ print  "--publish " $1+'${INCREMENT}' ":" $1 }' | xargs)"
	local LOCAL_BIND="$(echo 8000 11311 | tr ' ' '\n' | awk '{ print  "--publish 127.0.0.1:" $1+'${INCREMENT}' ":" $1 }' | xargs)"
	local EXPOSE_ONLY="$(echo 7800 7801 | tr ' ' '\n' | awk '{ print  "--expose " $1 }' | xargs)"

	local MIRRORS=

	if [ "" != "${BRANCH_ARCHIVE_MIRROR}" ]; then
		addhost "${BRANCH_ARCHIVE_MIRROR}"
		MIRRORS="${MIRRORS} -e BRANCH_ARCHIVE_MIRROR=${BRANCH_ARCHIVE_MIRROR}"
	fi

	if [ "" != "${LIFERAY_FILES_MIRROR}" ]; then
		addhost "${LIFERAY_FILES_MIRROR}"
		MIRRORS="${MIRRORS} -e LIFERAY_FILES_MIRROR=${LIFERAY_FILES_MIRROR}"

		if [ "" != "${LIFERAY_FILES_EE_FOLDER}" ]; then
			MIRRORS="${MIRRORS} -e LIFERAY_FILES_EE_FOLDER=${LIFERAY_FILES_EE_FOLDER}"
		fi
	fi

	if [ "" != "${LIFERAY_RELEASES_MIRROR}" ]; then
		addhost "${LIFERAY_RELEASES_MIRROR}"
		MIRRORS="${MIRRORS} -e LIFERAY_RELEASES_MIRROR=${LIFERAY_RELEASES_MIRROR}"
	fi

	if [ "" != "${LICENSE_MIRROR}" ]; then
		addhost "${LICENSE_MIRROR}"
		MIRRORS="${MIRRORS} -e LICENSE_MIRROR=${LICENSE_MIRROR}"
	fi

	START_TIME=$(date '+%s')

	if [ "" != "${1}" ]; then
		echo "${ADD_HOST}"

		pushd ${LIFERAY_HOME}
		. ${SCRIPT_FOLDER}/hotfix ${1}
		popd
	fi

	docker run ${GLOBAL_BIND} ${LOCAL_BIND} ${EXPOSE_ONLY} \
		${LIFERAY_HOME_MOUNT} ${LIFERAY_RDBUILD_MOUNT} ${LIFERAY_RELEASE_MOUNT} ${DOCLIB_MOUNT} ${LIFERAY_LICENSE_MOUNT} \
		-e RELEASE_ID=${RELEASE_ID} \
		-e LIFERAY_PASSWORD=${LIFERAY_PASSWORD} \
		-e IS_UPGRADE=${IS_UPGRADE} \
		-e JVM_HEAP_SIZE=${JVM_HEAP_SIZE} \
		${MIRRORS} ${NETWORK_METADATA} ${ADD_HOST} ${EXTRA_ARGS} --name ${CONTAINER_NAME} \
		--detach ${IMAGE_NAME} ${HOTFIX_URL}

	notify_finish &

	if [ "no" != "${ATTACH_LOG}" ]; then
		docker logs -f --since="${START_TIME}" ${CONTAINER_NAME}
	fi
}

if [ "" == "${LIFERAY_PASSWORD}" ]; then
	LIFERAY_PASSWORD='test'
fi

set_container_mounts "$1" && \
	set_image_name "$1" && \
	echo "Using Docker image ${IMAGE_NAME}" && \
	start_liferay "$1" "$2" "$3"